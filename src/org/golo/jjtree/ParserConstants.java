package org.golo.jjtree;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface ParserConstants {

  static final int /* RegularExpression Id. */
    EOF = 0,  // End of File
    //  1
    //  2
    //  3
    //  4
    NEWLINE = 5,
    ESCAPE = 6,
    MODULE = 7,
    IMPORT = 8,
    FUNCTION = 9,
    LOCAL = 10,
    RETURN = 11,
    IF = 12,
    ELSE = 13,
    WHILE = 14,
    FOR = 15,
    FOREACH = 16,
    IN = 17,
    THROW = 18,
    TRY = 19,
    CATCH = 20,
    FINALLY = 21,
    CASE = 22,
    WHEN = 23,
    MATCH = 24,
    THEN = 25,
    OTHERWISE = 26,
    AUGMENT = 27,
    NAMEDAUGMENTATION = 28,
    WITH = 29,
    BREAK = 30,
    CONTINUE = 31,
    STRUCT = 32,
    UNION = 33,
    MULTIPLICATIVE_OPERATOR = 34,
    ADDITIVE_OPERATOR = 35,
    RELATIONAL_OPERATOR = 36,
    EQUALITY_OPERATOR = 37,
    AND_OPERATOR = 38,
    OR_OPERATOR = 39,
    OR_IFNULL_OPERATOR = 40,
    UNARY_OPERATOR = 41,
    INVOCATION_OPERATOR = 42,
    CONSTANT_INVOCATION = 43,
    DECORATOR = 44,
    MACRO_INVOCATION = 45,
    MACRO = 46,
    VAR = 47,
    LET = 48,
    NUMBER = 49,
    LONG_NUMBER = 50,
    BIGINTEGER = 51,
    FLOATING_NUMBER = 52,
    FLOAT = 53,
    BIGDECIMAL = 54,
    STRING = 55,
    CHAR = 56,
    NULL = 57,
    TRUE = 58,
    FALSE = 59,
    CLASSREF = 60,
    FUNREF = 61,
    COLL_START = 62,
    //  63
    //  64
    MULTI_STRING = 65,
    IDENTIFIER = 66,
    LETTER = 67,
    ID_REST = 68,
    COMMENT = 69,
    //  70
    //  71
    DOCUMENTATION = 72,
    INVALID = 73,

    Dot              = 74,
    Comma            = 75,
    DotBrace         = 76,
    RightBrace       = 77,
    Equals           = 78,
    LeftBrace        = 79,
    LeftParenthesis  = 80,
    RightParenthesis = 81,
    Ellipsis         = 82,
    Bar              = 83,
    Arrow            = 84,
    DotDot           = 85,
    RightBracket     = 86;

  final static int /** Lexical state. */
    DEFAULT = 0,
    WithinMultiString = 1,
    ESCAPED = 2,
    WithinDocumentation = 3;

  /** Literal token values. */
  final static String[] tokenImage = {
    "<EOF>",                      //  0
    "\" \"",                      //  1 Space
    "\"\\t\"",                    //  2 Tab
    "\"\\r\"",                    //  3 CarriageReturn
    "\"\\f\"",                    //  4 FormFeed
    "\"\\n\"",                    //  5
    "\"`\"",                      //  6
    "\"module\"",                 //  7
    "\"import\"",                 //  8
    "\"function\"",               //  9
    "\"local\"",                  // 10
    "\"return\"",                 // 11
    "\"if\"",                     // 12
    "\"else\"",                   // 13
    "\"while\"",                  // 14
    "\"for\"",                    // 15
    "\"foreach\"",                // 16
    "\"in\"",                     // 17
    "\"throw\"",                  // 18
    "\"try\"",                    // 19
    "\"catch\"",                  // 20
    "\"finally\"",                // 21
    "\"case\"",                   // 22
    "\"when\"",                   // 23
    "\"match\"",                  // 24
    "\"then\"",                   // 25
    "\"otherwise\"",              // 26
    "<AUGMENT>",                  // 27
    "\"augmentation\"",           // 28
    "\"with\"",                   // 29
    "\"break\"",                  // 30
    "\"continue\"",               // 31
    "\"struct\"",                 // 32
    "\"union\"",                  // 33
    "<MULTIPLICATIVE_OPERATOR>",  // 34
    "<ADDITIVE_OPERATOR>",        // 35
    "<RELATIONAL_OPERATOR>",      // 36
    "<EQUALITY_OPERATOR>",        // 37
    "\"and\"",                    // 38
    "\"or\"",                     // 39
    "\"orIfNull\"",               // 40
    "\"not\"",                    // 41
    "<INVOCATION_OPERATOR>",      // 42
    "\"!\"",                      // 43
    "\"@\"",                      // 44
    "\"&\"",                      // 45
    "\"macro\"",                  // 46
    "\"var\"",                    // 47
    "\"let\"",                    // 48
    "<NUMBER>",                   // 49
    "<LONG_NUMBER>",              // 50
    "<BIGINTEGER>",               // 51
    "<FLOATING_NUMBER>",          // 52
    "<FLOAT>",                    // 53
    "<BIGDECIMAL>",               // 54
    "<STRING>",                   // 55
    "<CHAR>",                     // 56
    "\"null\"",                   // 57
    "\"true\"",                   // 58
    "\"false\"",                  // 59
    "<CLASSREF>",                 // 60
    "<FUNREF>",                   // 61
    "<COLL_START>",               // 62
    "\"\\\"\\\"\\\"\"",           // 63 TripleQuote
    "<token of kind 64>",         // 64 kind-64
    "\"\\\"\\\"\\\"\"",           // 65
    "<IDENTIFIER>",               // 66
    "<LETTER>",                   // 67
    "<ID_REST>",                  // 68
    "<COMMENT>",                  // 69
    "<token of kind 70>",         // 70 kind-70
    "<token of kind 71>",         // 71 kind-71
    "<DOCUMENTATION>",            // 72
    "<INVALID>",                  // 73
    "\".\"",                      // 74 Dot
    "\",\"",                      // 75 Comma
    "\".{\"",                     // 76 DotBrace
    "\"}\"",                      // 77 RightBrace
    "\"=\"",                      // 78 Equals
    "\"{\"",                      // 79 LeftBrace
    "\"(\"",                      // 80 LeftParenthesis
    "\")\"",                      // 81 RightParenthesis
    "\"...\"",                    // 82 Ellipsis
    "\"|\"",                      // 83 Bar
    "\"->\"",                     // 84 Arrow
    "\"..\"",                     // 85 DotDot
    "\"]\"",                      // 86 RightBracket
  };
}
