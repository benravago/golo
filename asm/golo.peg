# golo grammar

CompilationUnit <-
    BlankLines
    ModuleDeclaration BlankLines
    ( ImportDeclaration BlankLines )*
    ( ( TopLevelDeclaration | VariableDeclaration ) BlankLines )*

ModuleDeclaration <-
    Documentation?
    DecoratorDeclaration*
    'module' QualifiedName

ImportDeclaration <-
    'import' '.'? QualifiedName MultiImport?

TopLevelDeclaration <-
    Documentation?
    DecoratorDeclaration*
    ( ( 'local'? FunctionDeclaration )
      / StructDeclaration
      / UnionDeclaration
      / AugmentDeclaration
      / NamedAugmentationDeclaration
    )

VariableDeclaration <-
    ( 'let' / 'var' ) IDENTIFIER '=' BlankLine? ExpressionStatement

DecoratorDeclaration <-
    '@' '!'? ( InvocationExpression / Reference ) BlankLines

FunctionDeclaration <-
    ( 'function' / 'macro' ) IDENTIFIER '=' Function

StructDeclaration <-
    'struct' IDENTIFIER '=' '{' BlankLines
        MemberDeclaration BlankLines ( ',' BlankLines MemberDeclaration BlankLines )*
    '}'

UnionDeclaration <-
    'union' IDENTIFIER '=' '{' BlankLines
        ( UnionValue BlankLines )*
    '}'

AugmentDeclaration <-
    'augment' QualifiedName ( AugmentationDeclaration / ( 'with' AugmentationNames ) )

NamedAugmentationDeclaration <-
    'augmentation' IDENTIFIER '=' AugmentationDeclaration

MemberDeclaration <-
    Documentation? IDENTIFIER

AugmentationNames <-
    QualifiedName ( ',' BlankLine? QualifiedName )*

AugmentationDeclaration <-
    '{' BlankLines ( ( MacroInvocation / Augmentation ) BlankLines )* '}'

Augmentation <- 
    Documentation? DecoratorDeclaration* FunctionDeclaration

MultiImport <-
    '.' '{' BlankLine? QualifiedName ( ',' BlankLine? QualifiedName )+ BlankLine? '}'

Reference <-
    IDENTIFIER

Function <-
    ( '|' Parameters '...'? '|' )? ( Block / ( '->' BlankLine? ExpressionStatement ) )

Block <-
    '{' Statement* '}'

Statement <-
    BlankLine
    / Assignment
    / DestructuringAssignment
    / VariableDeclaration
    / ExpressionStatement
    / Return
    / ConditionalBranching
    / WhileLoop
    / ForLoop
    / ForEachLoop
    / Throw
    / TryCatchFinally
    / Case
    / Continue
    / Break

Assignment <-
    IDENTIFIER '=' BlankLine? ExpressionStatement

DestructuringAssignment <-
    ( 'let' / 'var' )? DestructuredNames '...'? '=' BlankLine? ExpressionStatement

Return <-
    'return' ( BlankLines ExpressionStatement )?

ConditionalBranching <-
    'if' ExpressionStatement Block ( 'else' ( ConditionalBranching / Block ) )?

WhileLoop <-
    'while' ExpressionStatement Block

ForLoop <-
    'for' '(' BlankLine?
        VariableDeclaration ',' BlankLine?
        ExpressionStatement ',' BlankLine?
        Statement
    ')' Block?

ForEachLoop <-
    'foreach' ( 
        ForEachClause / ( '(' ForEachClause ')' ) 
    ) Block?

ForEachClause <-
    ( IDENTIFIER 'in' ExpressionStatement ( 'when' ExpressionStatement )? )
    / ( DestructuredNames '...' 'in' ExpressionStatement ( 'when' ExpressionStatement )? )

Throw <-
    'throw' BlankLine? ExpressionStatement

TryCatchFinally <-
    'try' Block (
      ( 'finally' Block )
      / ( 'catch' '(' IDENTIFIER ')' Block ( 'finally' Block )? )
    )

Case <-
    'case' '{' BlankLines
        ( 'when' ExpressionStatement Block BlankLines )+
        'otherwise' Block BlankLines
    '}'

Continue <-
    'continue'

Break <-
    'break'

LocalDeclaration <-
    'with' '{'
        ( Assignment
          / DestructuringAssignment
          / BlankLine
        )+
    '}'

ExpressionStatement <-
    OrIfNullExpression LocalDeclaration? BlankLine?

OrIfNullExpression <-
    OrExpression ( BlankLine? 'orIfNull' BlankLine? OrExpression )*

OrExpression <-
    AndExpression ( BlankLine? 'or' BlankLine? AndExpression )*

AndExpression <-
    EqualityExpression ( BlankLine? 'and' BlankLine? EqualityExpression )*

EqualityExpression <-
    RelationalExpression ( BlankLine? ( '==' | '!=' | 'is' | 'isnt' ) BlankLine? RelationalExpression )?

RelationalExpression <-
    AdditiveExpression ( BlankLine? ( '<' | '<=' | '>' | '>=' | 'oftype' ) BlankLine? AdditiveExpression )?

AdditiveExpression <-
    MultiplicativeExpression ( BlankLine? ( '+' / '-' ) BlankLine? MultiplicativeExpression )*

MultiplicativeExpression <-
    UnaryExpression ( BlankLine? ( '*' / '/' / '%' ) BlankLine? InvocationExpression )*

UnaryExpression <-
    'not'? InvocationExpression

InvocationExpression <-
    Atom
    ( BlankLine? ( ':' / '?:' ) BlankLine? MethodInvocation )*
    AnonymousFunctionInvocation*

Atom <-
    FunctionInvocation
    / Reference
    / MacroInvocation
    / Match
    / Literal
    / Function
    / CollectionLiteral
    / '(' BlankLine? ExpressionStatement BlankLine? ')'


MacroInvocation <-
    '&' QualifiedName Arguments? ( Macro / Block )?

Macro <-
    '{' BlankLines
        ( ( ImportDeclaration / ToplevelDeclaration ) BlankLines )+
    BlankLines '}'

FunctionInvocation <-
    QualifiedName '!'? Arguments AnonymousFunctionInvocation*

MethodInvocation <-
    IDENTIFIER Arguments AnonymousFunctionInvocation*

AnonymousFunctionInvocation <-
    '!'? Arguments

Arguments <-
    '(' BlankLine? ( Argument ( ',' BlankLine? Argument )* )? ')'

Argument <-
    ( IDENTIFIER '=')? ExpressionStatement

Match <-
    'match' '{' BlankLines
        ( 'when' BlankLines ExpressionStatement BlankLines
          'then' BlankLines ExpressionStatement BlankLines )+
        'otherwise'  BlankLines ExpressionStatement BlankLines
    '}'

Literal <-
    ClassRef
    / StringLiteral
    / CharLiteral
    / BigDecimalLiteral
    / BigIntegerLiteral
    / FloatLiteral
    / DoubleLiteral
    / LongLiteral
    / IntegerLiteral
    / 'null'
    / 'true'
    / 'false'
    / FunctionRef

StringLiteral <-
    STRING | MULTI_STRING

CharLiteral <-
    CHAR

BigDecimalLiteral <-
    NUMBER_EXPONENT '_B'

BigIntegerLiteral <-
    NUMBER '_B'

FloatLiteral <-
    NUMBER_EXPONENT '_F'

DoubleLiteral <-
    NUMBER_EXPONENT

LongLiteral <-
    NUMBER '_L'

IntegerLiteral <-
    NUMBER

ClassRef <-
    IDENTIFIER ( '.' IDENTIFIER )* ( '.class' | '.module' )

FunctionRef <-
    '^' ( IDENTIFIER '.' IDENTIFIER )* '::')? IDENTIFIER ( '\\' NUMBER '...'? )?

CollectionLiteral <-
    ( 'array' / 'list' / 'set' / 'map' / 'vector' / 'tuple' )?
    '[' BlankLine? Collection? ']'

Collection <-
    ExpressionStatement
    ( ( ',' BlankLine? ExpressionStatement )+
      / '..' ExpressionStatement
      / ( ForEachLoop / ForLoop )+
    )?
    BlankLine?

Documentation <-
    '----' !'----'* '----'

DestructuredNames <-
    IDENTIFIER ( ',' BlankLine? IDENTIFIER )+

QualifiedName <-
    IDENTIFIER ( '.' IDENTIFIER )*

IDENTIFIER <-
    [A-Za-z_$] [0-9A-Za-z_$]*

BlankLines <-
    BlankLine*

BlankLine <-
    NEWLINE / COMMENT

NEWLINE <-
    '\n'

COMMENT <-
    '#' ![\n\r]* ( '\n' / '\r' / '\r\n' )?

STRING <-
    '"' ( !["\n\r\\] / SPECIAL )* '"'

CHAR <-
    ['] ( !['\n\r\\] / SPECIAL ) [']

SPECIAL <-
    '\\' ( [ntbrf'"\\] / ( 'u' [0-9a-f] [0-9a-f] [0-9a-f] [0-9a-f] ) )

NUMBER <-
    '-'? [0-9] ( '_'? [0-9] )*

NUMBER_EXPONENT <-
    NUMBER ( '.' [0-9] ( '_'? [0-9] )* )? ( 'e' '-'? [0-9]+ )?

MULTI_STRING <-
    '"""' !'"""'+ '"""'

